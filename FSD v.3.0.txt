crm-app-bypass/
├── src/                                    # Исходный код приложения
│   ├── app/                                # Глобальная конфигурация приложения
│   │   ├── init.tsx                        # Инициализация приложения (ThemeProvider, QueryClient)
│   │   ├── routes.tsx                      # Маршруты приложения (react-router-dom)
│   │   ├── error-boundary.tsx              # Компонент обработки ошибок
│   │   ├── index.tsx                       # Точка входа приложения
│   │   ├── README.md                       # Документация слоя app
│   │
│   ├── pages/                              # Страницы приложения
│   │   ├── dashboard/                      # Страница дашборда
│   │   │   ├── ui.tsx                      # UI-компонент страницы
│   │   │   ├── index.ts                    # Публичный API страницы
│   │   │   ├── README.md                   # Документация страницы
│   │   ├── login/                          # Страница авторизации
│   │   │   ├── ui.tsx                      # UI-компонент страницы
│   │   │   ├── index.ts                    # Публичный API
│   │   │   ├── README.md                   # Документация
│   │   ├── users/                          # Страница списка пользователей
│   │   │   ├── ui.tsx                      # UI-компонент
│   │   │   ├── index.ts                    # Публичный API
│   │   │   ├── README.md                   # Документация
│   │   ├── employees/                      # Страница списка сотрудников
│   │   │   ├── ui.tsx                      # UI-компонент
│   │   │   ├── index.ts                    # Публичный API
│   │   │   ├── README.md                   # Документация
│   │   ├── tasks/                          # Страницы заданий
│   │   │   ├── control/                    # Страница контроля заданий
│   │   │   │   ├── ui.tsx                  # UI-компонент
│   │   │   │   ├── index.ts                # Публичный API
│   │   │   │   ├── README.md               # Документация
│   │   │   ├── create/                     # Страница создания задания
│   │   │   │   ├── ui.tsx                  # UI-компонент
│   │   │   │   ├── index.ts                # Публичный API
│   │   │   │   ├── README.md               # Документация
│   │   │   ├── view/                       # Страница просмотра задания
│   │   │   │   ├── ui.tsx                  # UI-компонент
│   │   │   │   ├── index.ts                # Публичный API
│   │   │   │   ├── README.md               # Документация
│   │   ├── calendar/                       # Страница календаря
│   │   │   ├── ui.tsx                      # UI-компонент
│   │   │   ├── index.ts                    # Публичный API
│   │   │   ├── README.md                   # Документация
│   │   ├── help/                           # Страница помощи
│   │   │   ├── ui.tsx                      # UI-компонент
│   │   │   ├── index.ts                    # Публичный API
│   │   │   ├── README.md                   # Документация
│   │   ├── settings/                       # Страница настроек
│   │   │   ├── ui.tsx                      # UI-компонент
│   │   │   ├── index.ts                    # Публичный API
│   │   │   ├── README.md                   # Документация
│   │   ├── logs/                           # Страницы журналов
│   │   │   ├── checks/                     # Журнал проверок
│   │   │   │   ├── ui.tsx                  # UI-компонент
│   │   │   │   ├── index.ts                # Публичный API
│   │   │   │   ├── README.md               # Документация
│   │   │   ├── defects/                    # Журнал дефектов
│   │   │   │   ├── ui.tsx                  # UI-компонент
│   │   │   │   ├── index.ts                # Публичный API
│   │   │   │   ├── README.md               # Документация
│   │
│   ├── features/                           # Функциональные возможности
│   │   ├── auth/                           # Фича авторизации
│   │   │   ├── model/                      # Бизнес-логика
│   │   │   │   ├── store.ts                # Zustand-хранилище состояния
│   │   │   ├── hooks/                      # Хуки фичи
│   │   │   │   ├── use-auth.ts             # Хук для работы с авторизацией
│   │   │   ├── ui/                         # UI-компоненты
│   │   │   │   ├── login-form.tsx          # Компонент формы логина
│   │   │   ├── types.ts                    # Типы для авторизации
│   │   │   ├── index.ts                    # Публичный API фичи
│   │   │   ├── README.md                   # Документация фичи
│   │   ├── user-list/                      # Фича списка пользователей
│   │   │   ├── model/                      # Бизнес-логика
│   │   │   │   ├── filter.ts               # Логика фильтрации
│   │   │   ├── hooks/                      # Хуки
│   │   │   │   ├── use-user-list.ts        # Хук для списка пользователей
│   │   │   │   ├── use-employee-list.ts    # Хук для списка сотрудников
│   │   │   ├── ui/                         # UI-компоненты
│   │   │   │   ├── filter-form.tsx         # Компонент формы фильтрации
│   │   │   │   ├── edit-button.tsx         # Компонент кнопки редактирования
│   │   │   ├── types.ts                    # Типы
│   │   │   ├── index.ts                    # Публичный API
│   │   │   ├── README.md                   # Документация
│   │   ├── tasks/                          # Фича заданий
│   │   │   ├── model/                      # Бизнес-логика
│   │   │   │   ├── filter.ts               # Логика фильтрации задач
│   │   │   ├── hooks/                      # Хуки
│   │   │   │   ├── use-tasks.ts            # Хук для списка задач
│   │   │   │   ├── use-task.ts             # Хук для одной задачи
│   │   │   ├── ui/                         # UI-компоненты
│   │   │   │   ├── task-list.tsx           # Компонент списка задач
│   │   │   │   ├── chat.tsx                # Компонент чата для задачи
│   │   │   ├── types.ts                    # Типы
│   │   │   ├── index.ts                    # Публичный API
│   │   │   ├── README.md                   # Документация
│   │
│   ├── entities/                           # Бизнес-сущности
│   │   ├── user/                           # Сущность пользователя
│   │   │   ├── model/                      # Логика обработки данных
│   │   │   │   ├── normalize.ts            # Нормализация данных пользователя
│   │   │   ├── types.ts                    # Типы пользователя
│   │   │   ├── index.ts                    # Публичный API
│   │   │   ├── README.md                   # Документация
│   │   ├── employee/                       # Сущность сотрудника
│   │   │   ├── model/                      # Логика обработки данных
│   │   │   │   ├── normalize.ts            # Нормализация данных сотрудника
│   │   │   ├── types.ts                    # Типы сотрудника
│   │   │   ├── index.ts                    # Публичный API
│   │   │   ├── README.md                   # Документация
│   │   ├── task/                           # Сущность задачи
│   │   │   ├── model/                      # Логика обработки данных
│   │   │   │   ├── normalize.ts            # Нормализация данных задачи
│   │   │   ├── types.ts                    # Типы задачи
│   │   │   ├── index.ts                    # Публичный API
│   │   │   ├── README.md                   # Документация
│   │   ├── object/                         # Сущность объекта
│   │   │   ├── model/                      # Логика обработки данных
│   │   │   │   ├── normalize.ts            # Нормализация данных объекта
│   │   │   ├── types.ts                    # Типы объекта
│   │   │   ├── index.ts                    # Публичный API
│   │   │   ├── README.md                   # Документация
│   │   ├── parameter/                      # Сущность параметра
│   │   │   ├── model/                      # Логика обработки данных
│   │   │   │   ├── normalize.ts            # Нормализация данных параметра
│   │   │   ├── types.ts                    # Типы параметра
│   │   │   ├── index.ts                    # Публичный API
│   │   │   ├── README.md                   # Документация
│   │   ├── non-compliance/                 # Сущность несоответствия
│   │   │   ├── model/                      # Логика обработки данных
│   │   │   │   ├── normalize.ts            # Нормализация данных несоответствия
│   │   │   ├── types.ts                    # Типы несоответствия
│   │   │   ├── index.ts                    # Публичный API
│   │   │   ├── README.md                   # Документация
│   │
│   ├── widgets/                            # Переиспользуемые UI-компоненты
│   │   ├── header/                         # Компонент шапки
│   │   │   ├── ui.tsx                      # UI-компонент шапки
│   │   │   ├── index.ts                    # Публичный API
│   │   │   ├── README.md                   # Документация
│   │   ├── sidebar/                        # Компонент бокового меню
│   │   │   ├── ui.tsx                      # UI-компонент меню
│   │   │   ├── index.ts                    # Публичный API
│   │   │   ├── README.md                   # Документация
│   │   ├── layout/                         # Компоненты layout
│   │   │   ├── dashboard-layout.tsx        # Layout для дашборда
│   │   │   ├── login-layout.tsx            # Layout для страницы логина
│   │   │   ├── index.ts                    # Публичный API
│   │   │   ├── README.md                   # Документация
│   │   ├── table/                          # Компонент таблицы
│   │   │   ├── ui.tsx                      # UI-компонент таблицы
│   │   │   ├── index.ts                    # Публичный API
│   │   │   ├── README.md                   # Документация
│   │
│   ├── shared/                             # Общие утилиты и компоненты
│   │   ├── api/                            # Централизованные API-клиенты
│   │   │   ├── auth/                       # API для авторизации
│   │   │   │   ├── client.ts               # Клиент для запросов
│   │   │   │   ├── index.ts                # Публичный API
│   │   │   ├── user/                       # API для пользователей
│   │   │   │   ├── client.ts               # Клиент для запросов
│   │   │   │   ├── index.ts                # Публичный API
│   │   │   ├── task/                       # API для задач
│   │   │   │   ├── client.ts               # Клиент для запросов
│   │   │   │   ├── index.ts                # Публичный API
│   │   │   ├── object/                     # API для объектов
│   │   │   │   ├── client.ts               # Клиент для запросов
│   │   │   │   ├── index.ts                # Публичный API
│   │   │   ├── parameter/                  # API для параметров
│   │   │   │   ├── client.ts               # Клиент для запросов
│   │   │   │   ├── index.ts                # Публичный API
│   │   │   ├── non-compliance/             # API для несоответствий
│   │   │   │   ├── client.ts               # Клиент для запросов
│   │   │   │   ├── index.ts                # Публичный API
│   │   │   ├── dashboard/                  # API для дашборда
│   │   │   │   ├── client.ts               # Клиент для запросов
│   │   │   │   ├── index.ts                # Публичный API
│   │   │   ├── help/                       # API для помощи
│   │   │   │   ├── client.ts               # Клиент для запросов
│   │   │   │   ├── index.ts                # Публичный API
│   │   │   ├── settings/                   # API для настроек
│   │   │   │   ├── client.ts               # Клиент для запросов
│   │   │   │   ├── index.ts                # Публичный API
│   │   │   ├── axios.ts                    # Конфигурация Axios
│   │   │   ├── index.ts                    # Публичный API
│   │   │
│   │   ├── lib/                            # Общие утилиты
│   │   │   ├── schemas.ts                  # Zod-схемы для валидации
│   │   │   ├── error-handler.ts            # Обработчик ошибок
│   │   │   ├── normalize.ts                # Общие утилиты нормализации
│   │   │   ├── index.ts                    # Публичный API
│   │   │
│   │   ├── ui/                             # Общие UI-компоненты
│   │   │   ├── button/                     # Компонент кнопки
│   │   │   │   ├── ui.tsx                  # UI-компонент
│   │   │   │   ├── index.ts                # Публичный API
│   │   │   ├── input/                      # Компонент поля ввода
│   │   │   │   ├── ui.tsx                  # UI-компонент
│   │   │   │   ├── index.ts                # Публичный API
│   │   │
│   │   ├── hooks/                          # Общие хуки
│   │   │   ├── use-debounce.ts             # Хук для дебаунсинга
│   │   │   ├── use-user.ts                 # Хук для работы с текущим пользователем
│   │   │   ├── index.ts                    # Публичный API
│   │   │
│   │   ├── config/                         # Конфигурации
│   │   │   ├── navigation.ts               # Конфигурация навигации
│   │   │   ├── theme.ts                    # MUI-тема
│   │   │   ├── index.ts                    # Публичный API
│   │   │
│   ├── processes/                          # Долгие процессы
│   │   ├── notifications/                  # Уведомления
│   │   │   ├── model/                      # Бизнес-логика
│   │   │   │   ├── store.ts                # Zustand-хранилище
│   │   │   ├── hooks/                      # Хуки
│   │   │   │   ├── use-notifications.ts    # Хук для уведомлений
│   │   │   ├── index.ts                    # Публичный API
│   │   │   ├── README.md                   # Документация
│   │
├── public/                                 # Статические файлы
│   ├── favicon.ico                         # Иконка приложения
│   ├── logo.png                            # Логотип приложения
│
├── .env                                    # Переменные окружения (API_URL и т.д.)
├── .env.test                               # Переменные окружения для тестов
├── .gitignore                              # Игнорируемые файлы Git
├── db.json                                 # JSON-сервер для моков API
├── eslint.config.js                        # Конфигурация ESLint
├── tsconfig.json                           # Основная конфигурация TypeScript
├── tsconfig.app.json                       # Конфигурация TypeScript для приложения
├── tsconfig.node.json                      # Конфигурация TypeScript для Node.js
├── vite.config.ts                          # Конфигурация Vite
├── package.json                            # Зависимости и скрипты проекта
├── README.md                               # Общая документация проекта


------------------------------------------------------------------------------------------------------
------------------------------------ Комментарии к структуре -----------------------------------------
------------------------------------------------------------------------------------------------------

1. src/:
- Содержит весь исходный код приложения, организованный по слоям FSD 3.0 (app, pages, features, entities, widgets, shared, processes).

2. app/:
- Слой для глобальной конфигурации приложения.
- init.tsx: Инициализация провайдеров (MUI Theme, React Query).
- routes.tsx: Определение маршрутов с использованием react-router-dom.
- error-boundary.tsx: Компонент для обработки ошибок на уровне приложения.
- index.tsx: Точка входа, где рендерится корневой компонент.

3. pages/:
- Слой для страниц приложения, каждая из которых представляет отдельный маршрут.
- Каждая страница (например, dashboard, login) содержит ui.tsx для UI и index.ts для публичного API.
- Подпапки в tasks и logs отражают вложенные маршруты.

4. features/:
- Слой для функциональных возможностей (фичи), таких как авторизация, списки пользователей, задачи.
- Каждая фича содержит:
    * model/: Бизнес-логика (например, Zustand-хранилища или фильтры).
    * hooks/: Хуки для доступа к данным или логике.
    * ui/: UI-компоненты, специфичные для фичи.
    * types.ts: Типы для фичи.
    * index.ts: Публичный API для экспорта.

5. entities/:
- Слой для бизнес-сущностей (например, пользователь, задача).
- Содержит model/ для нормализации данных и types.ts для типизации.

6. widgets/:
- Слой для переиспользуемых UI-компонентов, таких как шапка, боковое меню, таблицы.
- Компоненты в layout/ определяют структуру страниц (например, dashboard-layout.tsx).

7. shared/:
- Слой для общих ресурсов, доступных всем слоям.
- api/: Централизованные API-клиенты, разделенные по доменам (например, auth, user).
- lib/: Общие утилиты (Zod-схемы, обработка ошибок).
- ui/: Общие UI-компоненты (например, Button, Input).
- hooks/: Общие хуки (например, useDebounce).
- config/: Конфигурации (тема MUI, навигация).
- processes/:
    * Слой для длительных процессов, таких как уведомления.
    * notifications: Хранилище и хуки для управления уведомлениями.

8. public/:
- Статические файлы, такие как иконки и логотипы.

9. Корневые файлы:
- .env, .env.test: Переменные окружения для продакшена и тестов.
- .gitignore: Игнорирование node_modules, dist и других ненужных файлов.
- db.json: Мок API для разработки с использованием JSON Server.
- eslint.config.js: Правила линтинга и контроль зависимостей FSD.
- tsconfig.json, tsconfig.app.json, tsconfig.node.json: Конфигурации TypeScript.
- vite.config.ts: Настройки Vite, включая алиасы.
- package.json: Зависимости и скрипты.
- README.md: Документация проекта.

