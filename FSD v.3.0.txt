crm-app-bypass/
├── public/                                 # Статические файлы, доступные напрямую
│ ├── favicon.ico                           # Иконка приложения для браузера
│ ├── manifest.json                         # Манифест для PWA (если используется)
├── src/                                    # Исходный код приложения
│ ├── app/                                  # Глобальная конфигурация приложения
│ │ ├── error-boundary.tsx                  # Компонент для обработки ошибок на уровне приложения
│ │ ├── index.tsx                           # Точка входа, где рендерится корневой компонент (App)
│ │ ├── init.tsx                            # Инициализация провайдеров (MUI ThemeProvider, QueryClientProvider)
│ │ ├── README.md                           # Документация слоя app (описание маршрутов, провайдеров)
│ │ ├── routes.tsx                          # Определение маршрутов с использованием react-router-dom
│ │
│ ├── assets/                               # Ресурсы приложения (иконки, изображения)
│ │ ├── icons/                              # SVG-иконки
│ │ │ ├── user.svg                          # Иконка пользователя
│ │ │ ├── task.svg                          # Иконка задачи
│ │ ├── images/                             # Изображения
│ │ │ ├── logo.png                          # Логотип приложения
│ │
│ ├── entities/                             # Бизнес-сущности
│ │ ├── employee/                           # Сущность сотрудника
│ │ │ ├── __tests__/                        # Тесты для сущности
│ │ │ ├── normalize.test.ts                 # Юнит-тесты для normalize.ts
│ │ │ ├── model/                            # Логика обработки данных
│ │ │ │ ├── normalize.ts                    # Нормализация данных сотрудника
│ │ │ ├── index.ts                          # Публичный API (экспорт типов, нормализации)
│ │ │ ├── README.md                         # Документация (описание сущности)
│ │ │ ├── types.ts                          # Типы сотрудника (Employee)
│ │ ├── non-compliance/                     # Сущность несоответствия
│ │ │ ├── __tests__/                        # Тесты для сущности
│ │ │ ├── normalize.test.ts                 # Юнит-тесты для normalize.ts
│ │ │ ├── model/                            # Логика обработки данных
│ │ │ │ ├── normalize.ts                    # Нормализация данных несоответствия
│ │ │ ├── index.ts                          # Публичный API (экспорт типов, нормализации)
│ │ │ ├── README.md                         # Документация (описание сущности)
│ │ │ ├── types.ts                          # Типы несоответствия (NonCompliance)
│ │ ├── object/                             # Сущность объекта
│ │ │ ├── __tests__/                        # Тесты для сущности
│ │ │ ├── normalize.test.ts                 # Юнит-тесты для normalize.ts
│ │ │ ├── model/                            # Логика обработки данных
│ │ │ │ ├── normalize.ts                    # Нормализация данных объекта
│ │ │ ├── index.ts                          # Публичный API (экспорт типов, нормализации)
│ │ │ ├── README.md                         # Документация (описание сущности)
│ │ │ ├── types.ts                          # Типы объекта (Object)
│ │ ├── parameter/                          # Сущность параметра
│ │ │ ├── __tests__/                        # Тесты для сущности
│ │ │ ├── normalize.test.ts                 # Юнит-тесты для normalize.ts
│ │ │ ├── model/                            # Логика обработки данных
│ │ │ │ ├── normalize.ts                    # Нормализация данных параметра
│ │ │ ├── index.ts                          # Публичный API (экспорт типов, нормализации)
│ │ │ ├── README.md                         # Документация (описание сущности)
│ │ │ ├── types.ts                          # Типы параметра (Parameter)
│ │ ├── task/                               # Сущность задачи
│ │ │ ├── __tests__/                        # Тесты для сущности
│ │ │ ├── normalize.test.ts                 # Юнит-тесты для normalize.ts
│ │ │ ├── model/                            # Логика обработки данных
│ │ │ │ ├── normalize.ts                    # Нормализация данных задачи
│ │ │ ├── index.ts                          # Публичный API (экспорт типов, нормализации)
│ │ │ ├── README.md                         # Документация (описание сущности)
│ │ │ ├── types.ts                          # Типы задачи (Task)
│ │ ├── user/                               # Сущность пользователя
│ │ │ ├── __tests__/                        # Тесты для сущности
│ │ │ ├── normalize.test.ts                 # Юнит-тесты для normalize.ts
│ │ │ ├── model/                            # Логика обработки данных
│ │ │ │ ├── normalize.ts                    # Нормализация данных пользователя
│ │ │ ├── index.ts                          # Публичный API (экспорт типов, нормализации)
│ │ │ ├── README.md                         # Документация (описание сущности)
│ │ │ ├── types.ts                          # Типы пользователя (User)
│ │
│ ├── features/                             # Функциональные возможности (фичи)
│ │ ├── auth/                               # Фича авторизации
│ │ │ ├── __tests__/                        # Тесты для фичи
│ │ │ ├── login-form.test.tsx               # Юнит-тесты для login-form.tsx
│ │ │ ├── use-auth.test.ts                  # Юнит-тесты для use-auth.ts
│ │ │ ├── hooks/                            # Хуки фичи
│ │ │ │ ├── use-auth.ts                     # Хук для управления авторизацией
│ │ │ ├── model/                            # Бизнес-логика
│ │ │ │ ├── store.ts                        # Zustand-хранилище для состояния авторизации
│ │ │ ├── ui/                               # UI-компоненты
│ │ │ │ ├── login-form.tsx                  # Компонент формы логина
│ │ │ ├── index.ts                          # Публичный API (экспорт компонентов, хуков)
│ │ │ ├── README.md                         # Документация (описание авторизации, API)
│ │ │ ├── types.ts                          # Типы для авторизации (например, User, Credentials)
│ │ ├── tasks/                              # Фича задач
│ │ │ ├── __tests__/                        # Тесты для фичи
│ │ │ ├── task-list.test.tsx                # Юнит-тесты для task-list.tsx
│ │ │ ├── use-tasks.test.ts                 # Юнит-тесты для use-tasks.ts
│ │ │ ├── hooks/                            # Хуки
│ │ │ │ ├── use-task.ts                     # Хук для работы с одной задачей
│ │ │ │ ├── use-tasks.ts                    # Хук для получения списка задач
│ │ │ ├── model/                            # Бизнес-логика
│ │ │ │ ├── filter.ts                       # Логика фильтрации задач
│ │ │ │ ├── store.ts                        # Zustand-хранилище для задач
│ │ │ ├── ui/                               # UI-компоненты
│ │ │ │ ├── chat.tsx                        # Компонент чата для задачи
│ │ │ │ ├── task-filter-form.tsx            # Компонент формы фильтрации задач
│ │ │ │ ├── task-list.tsx                   # Компонент списка задач
│ │ │ ├── index.ts                          # Публичный API (экспорт компонентов, хуков)
│ │ │ ├── README.md                         # Документация (описание функционала, API)
│ │ │ ├── types.ts                          # Типы для задач и фильтров
│ │ ├── user-list/                          # Фича списка пользователей
│ │ │ ├── __tests__/                        # Тесты для фичи
│ │ │ ├── filter-form.test.tsx              # Юнит-тесты для filter-form.tsx
│ │ │ ├── use-user-list.test.ts             # Юнит-тесты для use-user-list.ts
│ │ │ ├── hooks/                            # Хуки
│ │ │ │ ├── use-user-list.ts                # Хук для получения списка пользователей
│ │ │ │ ├── use-employee-list.ts            # Хук для получения списка сотрудников
│ │ │ ├── model/                            # Бизнес-логика
│ │ │ │ ├── filter.ts                       # Логика фильтрации пользователей
│ │ │ │ ├── store.ts                        # Zustand-хранилище для списка пользователей
│ │ │ ├── ui/                               # UI-компоненты
│ │ │ │ ├── edit-button.tsx                 # Компонент кнопки редактирования
│ │ │ │ ├── filter-form.tsx                 # Компонент формы фильтрации
│ │ │ ├── index.ts                          # Публичный API (экспорт компонентов, хуков)
│ │ │ ├── README.md                         # Документация (описание функционала, API)
│ │ │ ├── types.ts                          # Типы для пользователей и фильтров
│ │
│ ├── pages/                                # Страницы приложения, соответствующие маршрутам
│ │ ├── calendar/                           # Страница календаря
│ │ │ ├── __tests__/                        # Тесты для страницы
│ │ │ ├── ui.test.tsx                       # Юнит-тесты для ui.tsx
│ │ │ ├── index.ts                          # Публичный API (экспорт CalendarPage)
│ │ │ ├── README.md                         # Документация (описание календаря)
│ │ │ ├── ui.tsx                            # UI-компонент (календарь задач)
│ │ ├── dashboard/                          # Страница дашборда
│ │ │ ├── __tests__/                        # Тесты для страницы
│ │ │ ├── ui.test.tsx                       # Юнит-тесты для ui.tsx
│ │ │ ├── index.ts                          # Публичный API (экспорт DashboardPage)
│ │ │ ├── README.md                         # Документация (описание функционала дашборда)
│ │ │ ├── ui.tsx                            # UI-компонент страницы (отображает статистику, графики)
│ │ ├── employees/                          # Страница списка сотрудников
│ │ │ ├── __tests__/                        # Тесты для страницы
│ │ │ ├── ui.test.tsx                       # Юнит-тесты для ui.tsx
│ │ │ ├── index.ts                          # Публичный API (экспорт EmployeesPage)
│ │ │ ├── README.md                         # Документация (описание функционала списка сотрудников)
│ │ │ ├── ui.tsx                            # UI-компонент (таблица сотрудников)
│ │ ├── help/                               # Страница помощи
│ │ │ ├── __tests__/                        # Тесты для страницы
│ │ │ ├── ui.test.tsx                       # Юнит-тесты для ui.tsx
│ │ │ ├── index.ts                          # Публичный API (экспорт HelpPage)
│ │ │ ├── README.md                         # Документация (описание страницы помощи)
│ │ │ ├── ui.tsx                            # UI-компонент (справочные материалы)
│ │ ├── login/                              # Страница авторизации
│ │ │ ├── __tests__/                        # Тесты для страницы
│ │ │ ├── ui.test.tsx                       # Юнит-тесты для ui.tsx
│ │ │ ├── index.ts                          # Публичный API (экспорт LoginPage)
│ │ │ ├── README.md                         # Документация (описание процесса авторизации)
│ │ │ ├── ui.tsx                            # UI-компонент (форма логина)
│ │ ├── logs/                               # Страницы журналов
│ │ │ ├── checks/                           # Журнал проверок
│ │ │ │ ├── __tests__/                      # Тесты для страницы
│ │ │ │ ├── ui.test.tsx                     # Юнит-тесты для ui.tsx
│ │ │ │ ├── index.ts                        # Публичный API (экспорт CheckLogsPage)
│ │ │ │ ├── README.md                       # Документация (описание журнала проверок)
│ │ │ │ ├── ui.tsx                          # UI-компонент (таблица проверок)
│ │ │ ├── defects/                          # Журнал дефектов
│ │ │ │ ├── __tests__/                      # Тесты для страницы
│ │ │ │ ├── ui.test.tsx                     # Юнит-тесты для ui.tsx
│ │ │ │ ├── index.ts                        # Публичный API (экспорт DefectLogsPage)
│ │ │ │ ├── README.md                       # Документация (описание журнала дефектов)
│ │ │ │ ├── ui.tsx                          # UI-компонент (таблица дефектов)
│ │ ├── settings/                           # Страница настроек
│ │ │ ├── __tests__/                        # Тесты для страницы
│ │ │ ├── ui.test.tsx                       # Юнит-тесты для ui.tsx
│ │ │ ├── index.ts                          # Публичный API (экспорт SettingsPage)
│ │ │ ├── README.md                         # Документация (описание настроек)
│ │ │ ├── ui.tsx                            # UI-компонент (форма настроек)
│ │ ├── tasks/                              # Страницы для работы с задачами
│ │ │ ├── control/                          # Страница контроля задач
│ │ │ │ ├── __tests__/                      # Тесты для страницы
│ │ │ │ ├── ui.test.tsx                     # Юнит-тесты для ui.tsx
│ │ │ │ ├── index.ts                        # Публичный API (экспорт TaskControlPage)
│ │ │ │ ├── README.md                       # Документация (описание контроля задач)
│ │ │ │ ├── ui.tsx                          # UI-компонент (список задач для контроля)
│ │ │ ├── create/                           # Страница создания задачи
│ │ │ │ ├── __tests__/                      # Тесты для страницы
│ │ │ │ ├── ui.test.tsx                     # Юнит-тесты для ui.tsx
│ │ │ │ ├── index.ts                        # Публичный API (экспорт TaskCreatePage)
│ │ │ │ ├── README.md                       # Документация (описание создания задачи)
│ │ │ │ ├── ui.tsx                          # UI-компонент (форма создания задачи)
│ │ │ ├── view/                             # Страница просмотра задачи
│ │ │ │ ├── __tests__/                      # Тесты для страницы
│ │ │ │ ├── ui.test.tsx                     # Юнит-тесты для ui.tsx
│ │ │ │ ├── index.ts                        # Публичный API (экспорт TaskViewPage)
│ │ │ │ ├── README.md                       # Документация (описание просмотра задачи)
│ │ │ │ ├── ui.tsx                          # UI-компонент (детали задачи, чат)
│ │ ├── ui-kit/                             # Страница списка пользователей
│ │ │ ├── button/                           # Тесты для страницы
│ │ │ │ ├── index.ts                        # Публичный API (экспорт AppButtons)
│ │ │ │ ├── ui.ts                           # пример использования кнопок
│ │ ├── users/                              # Страница списка пользователей
│ │ │ ├── __tests__/                        # Тесты для страницы
│ │ │ ├── ui.test.tsx                       # Юнит-тесты для ui.tsx
│ │ │ ├── index.ts                          # Публичный API (экспорт UsersPage)
│ │ │ ├── README.md                         # Документация (описание функционала списка пользователей)
│ │ │ ├── ui.tsx                            # UI-компонент (таблица пользователей)
│ │
│ ├── shared/                               # Общие утилиты и компоненты
│ │ ├── api/                                # Централизованные API-клиенты
│ │ │ ├── auth/                             # API для авторизации
│ │ │ │ ├── client.ts                       # Axios-клиент для запросов авторизации
│ │ │ │ ├── index.ts                        # Публичный API (экспорт authApi)
│ │ │ ├── dashboard/                        # API для дашборда
│ │ │ │ ├── client.ts                       # Axios-клиент для запросов дашборда
│ │ │ │ ├── index.ts                        # Публичный API (экспорт dashboardApi)
│ │ │ ├── help/                             # API для помощи
│ │ │ │ ├── client.ts                       # Axios-клиент для запросов помощи
│ │ │ │ ├── index.ts                        # Публичный API (экспорт helpApi)
│ │ │ ├── non-compliance/                   # API для несоответствий
│ │ │ │ ├── client.ts                       # Axios-клиент для запросов несоответствий
│ │ │ │ ├── index.ts                        # Публичный API (экспорт nonComplianceApi)
│ │ │ ├── object/                           # API для объектов
│ │ │ │ ├── client.ts                       # Axios-клиент для запросов объектов
│ │ │ │ ├── index.ts                        # Публичный API (экспорт objectApi)
│ │ │ ├── parameter/                        # API для параметров
│ │ │ │ ├── client.ts                       # Axios-клиент для запросов параметров
│ │ │ │ ├── index.ts                        # Публичный API (экспорт parameterApi)
│ │ │ ├── settings/                         # API для настроек
│ │ │ │ ├── client.ts                       # Axios-клиент для запросов настроек
│ │ │ │ ├── index.ts                        # Публичный API (экспорт settingsApi)
│ │ │ ├── task/                             # API для задач
│ │ │ │ ├── client.ts                       # Axios-клиент для запросов задач
│ │ │ │ ├── index.ts                        # Публичный API (экспорт taskApi)
│ │ │ ├── user/                             # API для пользователей
│ │ │ │ ├── client.ts                       # Axios-клиент для запросов пользователей
│ │ │ │ ├── index.ts                        # Публичный API (экспорт userApi)
│ │ │ ├── axios.ts                          # Глобальная конфигурация Axios (интерцепторы, базовый URL)
│ │ │ ├── index.ts                          # Публичный API (экспорт всех клиентов)
│ │ │
│ │ ├── config/                             # Конфигурации приложения
│ │ │ ├── index.ts                          # Публичный API (экспорт конфигураций)
│ │ │ ├── navigation.ts                     # Конфигурация навигации (пункты меню, роли)
│ │ │ ├── theme.ts                          # MUI-тема для стилизации приложения
│ │ │
│ │ ├── hooks/                              # Общие хуки
│ │ │ ├── __tests__/                        # Тесты для хуков
│ │ │ ├── use-debounce.test.ts              # Юнит-тесты для use-debounce.ts
│ │ │ ├── use-user.test.ts                  # Юнит-тесты для use-user.ts
│ │ │ ├── index.ts                          # Публичный API (экспорт хуков)
│ │ │ ├── use-debounce.ts                   # Хук для дебаунсинга значений
│ │ │ ├── use-user.ts                       # Хук для получения данных текущего пользователя
│ │ │
│ │ ├── lib/                                # Общие утилиты
│ │ │ ├── __tests__/                        # Тесты для утилит
│ │ │ ├── error-handler.test.ts             # Юнит-тесты для error-handler.ts
│ │ │ ├── normalize.test.ts                 # Юнит-тесты для normalize.ts
│ │ │ ├── error-handler.ts                  # Утилита для обработки ошибок API
│ │ │ ├── index.ts                          # Публичный API (экспорт утилит)
│ │ │ ├── normalize.ts                      # Общие функции нормализации данных
│ │ │ ├── schemas.ts                        # Zod-схемы для валидации форм и API
│ │ │ ├── storage.ts                        # 
│ │ │
│ │ ├── processes/                          # Долгие процессы
│ │ │ ├── notifications/                    # Процесс управления уведомлениями
│ │ │ │ ├── __tests__/                      # Тесты для процесса
│ │ │ │ ├── use-notifications.test.ts       # Юнит-тесты для use-notifications.ts
│ │ │ │ ├── hooks/                          # Хуки
│ │ │ │ │ ├── use-notifications.ts          # Хук для работы с уведомлениями
│ │ │ │ ├── model/                          # Бизнес-логика
│ │ │ │ │ ├── store.ts                      # Zustand-хранилище для уведомлений
│ │ │ │ ├── index.ts                        # Публичный API (экспорт хуков, store)
│ │ │ │ ├── README.md                       # Документация (описание уведомлений)
│ │ │
│ │ ├── types/                              # Общие типы, используемые в приложении
│ │ │ ├── api.ts                            # Типы для API-ответов (например, Response<T>)
│ │ │ ├── index.ts                          # Публичный API (экспорт типов)
│ │ │
│ │ ├── ui/                                 # Общие UI-компоненты
│ │ │ ├── __tests__/                        # Тесты для компонентов
│ │ │ ├── custom-component/                 # Кастомные компоненты
│ │ │ │ ├── app-button/                     # Компонент универсальной кнопки
│ │ │ │ │ ├── AppButton.tsx                 # ui кнопки
│ │ │ │ │ ├── index.ts                      # Публичный API (экспорт AppButton)
│ │ │ │ ├── app-checkbox/                   # Компонент универсального чекбокса
│ │ │ │ │ ├── AppCheckbox.tsx               # ui чекбокс
│ │ │ │ │ ├── index.ts                      # Публичный API (экспорт AppCheckbox)
│ │ │ │ ├── app-radio-group/                # Компонент универсального радиокнопок
│ │ │ │ │ ├── AppRadioGroup.tsx             # ui радиокнопок
│ │ │ │ │ ├── index.ts                      # Публичный API (экспорт AppRadioGroup)
│ │ │ │ ├── app-select/                     # Компонент универсального выпадающего списка
│ │ │ │ │ ├── AppSelect.tsx                 # ui выпадающего списка
│ │ │ │ │ ├── index.ts                      # Публичный API (экспорт AppSelect)
│ │ │ │ ├── app-slider/                     # Компонент универсального палзунка
│ │ │ │ │ ├── AppSlider.tsx                 # ui палзунка
│ │ │ │ │ ├── index.ts                      # Публичный API (экспорт AppSlider)
│ │ │ │ ├── app-switch/                     # Компонент универсального переключателя
│ │ │ │ │ ├── AppSwitch.tsx                 # ui переключателя
│ │ │ │ │ ├── index.ts                      # Публичный API (экспорт AppSwitch)
│ │ │ │ ├── app-tables/                     # Компонент универсального таблицы
│ │ │ │ │ ├── AppTables.tsx                 # ui таблицы
│ │ │ │ │ ├── index.ts                      # Публичный API (экспорт AppTables)
│ │ │ │ ├── app-text-field/                 # Компонент универсального поля ввода
│ │ │ │ │ ├── AppTextField.tsx              # ui поля ввода
│ │ │ │ │ ├── index.ts                      # Публичный API (экспорт AppTextField)
│ │ │ ├── Button.test.tsx                   # Юнит-тесты для Button.tsx
│ │ │ ├── Input.test.tsx                    # Юнит-тесты для Input.tsx
│ │ │ ├── Button.tsx                        # Компонент универсальной кнопки
│ │ │ ├── ErrorBoundary.tsx                 # Компонент универсальной вывода ошибки
│ │ │ ├── index.ts                          # Публичный API (экспорт Button, Input)
│ │ │ ├── Input.tsx                         # Компонент универсального поля ввода
│ │ │ ├── Logo.tsx                          # Компонент универсального отображения логотипа
│ │
│ ├── widgets/                              # Переиспользуемые UI-компоненты
│ │ ├── header/                             # Компонент шапки
│ │ │ ├── __tests__/                        # Тесты для компонента
│ │ │ ├── ui.test.tsx                       # Юнит-тесты для ui.tsx
│ │ │ ├── index.ts                          # Публичный API (экспорт Header)
│ │ │ ├── README.md                         # Документация (описание шапки)
│ │ │ ├── types.ts                          # типы (описание шапки)
│ │ │ ├── ui.tsx                            # UI-компонент (отображение аватара, меню)
│ │ ├── layout/                             # Компоненты layout
│ │ │ ├── __tests__/                        # Тесты для компонентов
│ │ │ ├── dashboard-layout.test.tsx         # Юнит-тесты для dashboard-layout.tsx
│ │ │ ├── login-layout.test.tsx             # Юнит-тесты для login-layout.tsx
│ │ │ ├── dashboard-layout.tsx              # Layout для страниц с дашбордом
│ │ │ ├── index.ts                          # Публичный API (экспорт DashboardLayout, LoginLayout)
│ │ │ ├── login-layout.tsx                  # Layout для страницы логина
│ │ │ ├── README.md                         # Документация (описание layouts)
│ │ ├── sidebar/                            # Компонент бокового меню
│ │ │ ├── __tests__/                        # Тесты для компонента
│ │ │ ├── ui.test.tsx                       # Юнит-тесты для ui.tsx
│ │ │ ├── index.ts                          # Публичный API (экспорт Sidebar)
│ │ │ ├── README.md                         # Документация (описание меню)
│ │ │ ├── ui.tsx                            # UI-компонент (навигация)
│ │ ├── table/                              # Компонент таблицы
│ │ │ ├── __tests__/                        # Тесты для компонента
│ │ │ ├── ui.test.tsx                       # Юнит-тесты для ui.tsx
│ │ │ ├── index.ts                          # Публичный API (экспорт Table)
│ │ │ ├── README.md                         # Документация (описание таблицы)
│ │ │ ├── ui.tsx                            # UI-компонент (таблица с сортировкой, пагинацией)
│
├── tests/                                  # Глобальные тесты (интеграционные, e2e)
│ ├── integration/                          # Интеграционные тесты
│ │ ├── auth.test.ts                        # Тесты авторизации
│ │ ├── tasks.test.ts                       # Тесты работы с задачами
│ ├── setup.ts                              # Настройка тестовой среды (Jest)
│ │
├── .env                                    # Переменные окружения для продакшена (API_URL и т.д.)
├── .env.test                               # Переменные окружения для тестов
├── .gitignore                              # Игнорируемые файлы (node_modules, dist)
├── eslint.config.js                        # Конфигурация ESLint (правила линтинга, FSD)
├── tsconfig.json                           # Основная конфигурация TypeScript
├── tsconfig.app.json                       # Конфигурация TypeScript для приложения
├── tsconfig.node.json                      # Конфигурация TypeScript для Node.js
├── vite.config.ts                          # Конфигурация Vite (алиасы, плагины)
├── package.json                            # Зависимости и скрипты проекта
├── README.md                               # Общая документация проекта (установка, запуск)

------------------------------------------------------------------------------------------------------
------------------------------------ Комментарии к структуре -----------------------------------------
------------------------------------------------------------------------------------------------------

1. src/:
- Содержит весь исходный код приложения, организованный по слоям FSD 3.0 (app, pages, features, entities, widgets, shared, processes).

2. app/:
- Слой для глобальной конфигурации приложения.
- init.tsx: Инициализация провайдеров (MUI Theme, React Query).
- routes.tsx: Определение маршрутов с использованием react-router-dom.
- error-boundary.tsx: Компонент для обработки ошибок на уровне приложения.
- index.tsx: Точка входа, где рендерится корневой компонент.

3. pages/:
- Слой для страниц приложения, каждая из которых представляет отдельный маршрут.
- Каждая страница (например, dashboard, login) содержит ui.tsx для UI и index.ts для публичного API.
- Подпапки в tasks и logs отражают вложенные маршруты.

4. features/:
- Слой для функциональных возможностей (фичи), таких как авторизация, списки пользователей, задачи.
- Каждая фича содержит:
    * model/: Бизнес-логика (например, Zustand-хранилища или фильтры).
    * hooks/: Хуки для доступа к данным или логике.
    * ui/: UI-компоненты, специфичные для фичи.
    * types.ts: Типы для фичи.
    * index.ts: Публичный API для экспорта.

5. entities/:
- Слой для бизнес-сущностей (например, пользователь, задача).
- Содержит model/ для нормализации данных и types.ts для типизации.

6. widgets/:
- Слой для переиспользуемых UI-компонентов, таких как шапка, боковое меню, таблицы.
- Компоненты в layout/ определяют структуру страниц (например, dashboard-layout.tsx).

7. shared/:
- Слой для общих ресурсов, доступных всем слоям.
- api/: Централизованные API-клиенты, разделенные по доменам (например, auth, user).
- lib/: Общие утилиты (Zod-схемы, обработка ошибок).
- ui/: Общие UI-компоненты (например, Button, Input).
- hooks/: Общие хуки (например, useDebounce).
- config/: Конфигурации (тема MUI, навигация).
- processes/:
    * Слой для длительных процессов, таких как уведомления.
    * notifications: Хранилище и хуки для управления уведомлениями.

8. public/:
- Статические файлы, такие как иконки и логотипы.

9. Корневые файлы:
- .env, .env.test: Переменные окружения для продакшена и тестов.
- .gitignore: Игнорирование node_modules, dist и других ненужных файлов.
- db.json: Мок API для разработки с использованием JSON Server.
- eslint.config.js: Правила линтинга и контроль зависимостей FSD.
- tsconfig.json, tsconfig.app.json, tsconfig.node.json: Конфигурации TypeScript.
- vite.config.ts: Настройки Vite, включая алиасы.
- package.json: Зависимости и скрипты.
- README.md: Документация проекта.

