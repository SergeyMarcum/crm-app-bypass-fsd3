crm-app-bypass/
├── src/                                    # Исходный код приложения
│   ├── app/                                # Глобальная конфигурация приложения
│   │   ├── init.tsx                        # Инициализация провайдеров (MUI ThemeProvider, QueryClientProvider)
│   │   ├── routes.tsx                      # Определение маршрутов с использованием react-router-dom
│   │   ├── error-boundary.tsx              # Компонент для обработки ошибок на уровне приложения
│   │   ├── index.tsx                       # Точка входа, где рендерится корневой компонент (App)
│   │   ├── README.md                       # Документация слоя app (описание маршрутов, провайдеров)
│   │
│   ├── pages/                              # Страницы приложения, соответствующие маршрутам
│   │   ├── dashboard/                      # Страница дашборда
│   │   │   ├── ui.tsx                      # UI-компонент страницы (отображает статистику, графики)
│   │   │   ├── index.ts                    # Публичный API (экспорт DashboardPage)
│   │   │   ├── README.md                   # Документация (описание функционала дашборда)
│   │   │   ├── __tests__/                  # Тесты для страницы
│   │   │       ├── ui.test.tsx             # Юнит-тесты для ui.tsx
│   │   ├── login/                          # Страница авторизации
│   │   │   ├── ui.tsx                      # UI-компонент (форма логина)
│   │   │   ├── index.ts                    # Публичный API (экспорт LoginPage)
│   │   │   ├── README.md                   # Документация (описание процесса авторизации)
│   │   │   ├── __tests__/                  # Тесты для страницы
│   │   │       ├── ui.test.tsx             # Юнит-тесты для ui.tsx
│   │   ├── users/                          # Страница списка пользователей
│   │   │   ├── ui.tsx                      # UI-компонент (таблица пользователей)
│   │   │   ├── index.ts                    # Публичный API (экспорт UsersPage)
│   │   │   ├── README.md                   # Документация (описание функционала списка пользователей)
│   │   │   ├── __tests__/                  # Тесты для страницы
│   │   │       ├── ui.test.tsx             # Юнит-тесты для ui.tsx
│   │   ├── employees/                      # Страница списка сотрудников
│   │   │   ├── ui.tsx                      # UI-компонент (таблица сотрудников)
│   │   │   ├── index.ts                    # Публичный API (экспорт EmployeesPage)
│   │   │   ├── README.md                   # Документация (описание функционала списка сотрудников)
│   │   │   ├── __tests__/                  # Тесты для страницы
│   │   │       ├── ui.test.tsx             # Юнит-тесты для ui.tsx
│   │   ├── tasks/                          # Страницы для работы с задачами
│   │   │   ├── control/                    # Страница контроля задач
│   │   │   │   ├── ui.tsx                  # UI-компонент (список задач для контроля)
│   │   │   │   ├── index.ts                # Публичный API (экспорт TaskControlPage)
│   │   │   │   ├── README.md               # Документация (описание контроля задач)
│   │   │   │   ├── __tests__/              # Тесты для страницы
│   │   │   │       ├── ui.test.tsx         # Юнит-тесты для ui.tsx
│   │   │   ├── create/                     # Страница создания задачи
│   │   │   │   ├── ui.tsx                  # UI-компонент (форма создания задачи)
│   │   │   │   ├── index.ts                # Публичный API (экспорт TaskCreatePage)
│   │   │   │   ├── README.md               # Документация (описание создания задачи)
│   │   │   │   ├── __tests__/              # Тесты для страницы
│   │   │   │       ├── ui.test.tsx         # Юнит-тесты для ui.tsx
│   │   │   ├── view/                       # Страница просмотра задачи
│   │   │   │   ├── ui.tsx                  # UI-компонент (детали задачи, чат)
│   │   │   │   ├── index.ts                # Публичный API (экспорт TaskViewPage)
│   │   │   │   ├── README.md               # Документация (описание просмотра задачи)
│   │   │   │   ├── __tests__/              # Тесты для страницы
│   │   │   │       ├── ui.test.tsx         # Юнит-тесты для ui.tsx
│   │   ├── calendar/                       # Страница календаря
│   │   │   ├── ui.tsx                      # UI-компонент (календарь задач)
│   │   │   ├── index.ts                    # Публичный API (экспорт CalendarPage)
│   │   │   ├── README.md                   # Документация (описание календаря)
│   │   │   ├── __tests__/                  # Тесты для страницы
│   │   │       ├── ui.test.tsx             # Юнит-тесты для ui.tsx
│   │   ├── help/                           # Страница помощи
│   │   │   ├── ui.tsx                      # UI-компонент (справочные материалы)
│   │   │   ├── index.ts                    # Публичный API (экспорт HelpPage)
│   │   │   ├── README.md                   # Документация (описание страницы помощи)
│   │   │   ├── __tests__/                  # Тесты для страницы
│   │   │       ├── ui.test.tsx             # Юнит-тесты для ui.tsx
│   │   ├── settings/                       # Страница настроек
│   │   │   ├── ui.tsx                      # UI-компонент (форма настроек)
│   │   │   ├── index.ts                    # Публичный API (экспорт SettingsPage)
│   │   │   ├── README.md                   # Документация (описание настроек)
│   │   │   ├── __tests__/                  # Тесты для страницы
│   │   │       ├── ui.test.tsx             # Юнит-тесты для ui.tsx
│   │   ├── logs/                           # Страницы журналов
│   │   │   ├── checks/                     # Журнал проверок
│   │   │   │   ├── ui.tsx                  # UI-компонент (таблица проверок)
│   │   │   │   ├── index.ts                # Публичный API (экспорт CheckLogsPage)
│   │   │   │   ├── README.md               # Документация (описание журнала проверок)
│   │   │   │   ├── __tests__/              # Тесты для страницы
│   │   │   │       ├── ui.test.tsx         # Юнит-тесты для ui.tsx
│   │   │   ├── defects/                    # Журнал дефектов
│   │   │   │   ├── ui.tsx                  # UI-компонент (таблица дефектов)
│   │   │   │   ├── index.ts                # Публичный API (экспорт DefectLogsPage)
│   │   │   │   ├── README.md               # Документация (описание журнала дефектов)
│   │   │   │   ├── __tests__/              # Тесты для страницы
│   │   │   │       ├── ui.test.tsx         # Юнит-тесты для ui.tsx
│   │
│   ├── features/                           # Функциональные возможности (фичи)
│   │   ├── auth/                           # Фича авторизации
│   │   │   ├── model/                      # Бизнес-логика
│   │   │   │   ├── store.ts                # Zustand-хранилище для состояния авторизации
│   │   │   ├── hooks/                      # Хуки фичи
│   │   │   │   ├── use-auth.ts             # Хук для управления авторизацией
│   │   │   ├── ui/                         # UI-компоненты
│   │   │   │   ├── login-form.tsx          # Компонент формы логина
│   │   │   ├── types.ts                    # Типы для авторизации (например, User, Credentials)
│   │   │   ├── index.ts                    # Публичный API (экспорт компонентов, хуков)
│   │   │   ├── README.md                   # Документация (описание авторизации, API)
│   │   │   ├── __tests__/                  # Тесты для фичи
│   │   │       ├── login-form.test.tsx     # Юнит-тесты для login-form.tsx
│   │   │       ├── use-auth.test.ts        # Юнит-тесты для use-auth.ts
│   │   ├── user-list/                      # Фича списка пользователей
│   │   │   ├── model/                      # Бизнес-логика
│   │   │   │   ├── store.ts                # Zustand-хранилище для списка пользователей
│   │   │   │   ├── filter.ts               # Логика фильтрации пользователей
│   │   │   ├── hooks/                      # Хуки
│   │   │   │   ├── use-user-list.ts        # Хук для получения списка пользователей
│   │   │   │   ├── use-employee-list.ts    # Хук для получения списка сотрудников
│   │   │   ├── ui/                         # UI-компоненты
│   │   │   │   ├── filter-form.tsx         # Компонент формы фильтрации
│   │   │   │   ├── edit-button.tsx         # Компонент кнопки редактирования
│   │   │   ├── types.ts                    # Типы для пользователей и фильтров
│   │   │   ├── index.ts                    # Публичный API (экспорт компонентов, хуков)
│   │   │   ├── README.md                   # Документация (описание функционала, API)
│   │   │   ├── __tests__/                  # Тесты для фичи
│   │   │       ├── filter-form.test.tsx    # Юнит-тесты для filter-form.tsx
│   │   │       ├── use-user-list.test.ts   # Юнит-тесты для use-user-list.ts
│   │   ├── tasks/                          # Фича задач
│   │   │   ├── model/                      # Бизнес-логика
│   │   │   │   ├── store.ts                # Zustand-хранилище для задач
│   │   │   │   ├── filter.ts               # Логика фильтрации задач
│   │   │   ├── hooks/                      # Хуки
│   │   │   │   ├── use-tasks.ts            # Хук для получения списка задач
│   │   │   │   ├── use-task.ts             # Хук для работы с одной задачей
│   │   │   ├── ui/                         # UI-компоненты
│   │   │   │   ├── task-list.tsx           # Компонент списка задач
│   │   │   │   ├── task-filter-form.tsx    # Компонент формы фильтрации задач
│   │   │   │   ├── chat.tsx                # Компонент чата для задачи
│   │   │   ├── types.ts                    # Типы для задач и фильтров
│   │   │   ├── index.ts                    # Публичный API (экспорт компонентов, хуков)
│   │   │   ├── README.md                   # Документация (описание функционала, API)
│   │   │   ├── __tests__/                  # Тесты для фичи
│   │   │       ├── task-list.test.tsx      # Юнит-тесты для task-list.tsx
│   │   │       ├── use-tasks.test.ts       # Юнит-тесты для use-tasks.ts
│   │
│   ├── entities/                           # Бизнес-сущности
│   │   ├── user/                           # Сущность пользователя
│   │   │   ├── model/                      # Логика обработки данных
│   │   │   │   ├── normalize.ts            # Нормализация данных пользователя
│   │   │   ├── types.ts                    # Типы пользователя (User)
│   │   │   ├── index.ts                    # Публичный API (экспорт типов, нормализации)
│   │   │   ├── README.md                   # Документация (описание сущности)
│   │   │   ├── __tests__/                  # Тесты для сущности
│   │   │       ├── normalize.test.ts       # Юнит-тесты для normalize.ts
│   │   ├── employee/                       # Сущность сотрудника
│   │   │   ├── model/                      # Логика обработки данных
│   │   │   │   ├── normalize.ts            # Нормализация данных сотрудника
│   │   │   ├── types.ts                    # Типы сотрудника (Employee)
│   │   │   ├── index.ts                    # Публичный API (экспорт типов, нормализации)
│   │   │   ├── README.md                   # Документация (описание сущности)
│   │   │   ├── __tests__/                  # Тесты для сущности
│   │   │       ├── normalize.test.ts       # Юнит-тесты для normalize.ts
│   │   ├── task/                           # Сущность задачи
│   │   │   ├── model/                      # Логика обработки данных
│   │   │   │   ├── normalize.ts            # Нормализация данных задачи
│   │   │   ├── types.ts                    # Типы задачи (Task)
│   │   │   ├── index.ts                    # Публичный API (экспорт типов, нормализации)
│   │   │   ├── README.md                   # Документация (описание сущности)
│   │   │   ├── __tests__/                  # Тесты для сущности
│   │   │       ├── normalize.test.ts       # Юнит-тесты для normalize.ts
│   │   ├── object/                         # Сущность объекта
│   │   │   ├── model/                      # Логика обработки данных
│   │   │   │   ├── normalize.ts            # Нормализация данных объекта
│   │   │   ├── types.ts                    # Типы объекта (Object)
│   │   │   ├── index.ts                    # Публичный API (экспорт типов, нормализации)
│   │   │   ├── README.md                   # Документация (описание сущности)
│   │   │   ├── __tests__/                  # Тесты для сущности
│   │   │       ├── normalize.test.ts       # Юнит-тесты для normalize.ts
│   │   ├── parameter/                      # Сущность параметра
│   │   │   ├── model/                      # Логика обработки данных
│   │   │   │   ├── normalize.ts            # Нормализация данных параметра
│   │   │   ├── types.ts                    # Типы параметра (Parameter)
│   │   │   ├── index.ts                    # Публичный API (экспорт типов, нормализации)
│   │   │   ├── README.md                   # Документация (описание сущности)
│   │   │   ├── __tests__/                  # Тесты для сущности
│   │   │       ├── normalize.test.ts       # Юнит-тесты для normalize.ts
│   │   ├── non-compliance/                 # Сущность несоответствия
│   │   │   ├── model/                      # Логика обработки данных
│   │   │   │   ├── normalize.ts            # Нормализация данных несоответствия
│   │   │   ├── types.ts                    # Типы несоответствия (NonCompliance)
│   │   │   ├── index.ts                    # Публичный API (экспорт типов, нормализации)
│   │   │   ├── README.md                   # Документация (описание сущности)
│   │   │   ├── __tests__/                  # Тесты для сущности
│   │   │       ├── normalize.test.ts       # Юнит-тесты для normalize.ts
│   │
│   ├── widgets/                            # Переиспользуемые UI-компоненты
│   │   ├── header/                         # Компонент шапки
│   │   │   ├── ui.tsx                      # UI-компонент (отображение аватара, меню)
│   │   │   ├── index.ts                    # Публичный API (экспорт Header)
│   │   │   ├── README.md                   # Документация (описание шапки)
│   │   │   ├── __tests__/                  # Тесты для компонента
│   │   │       ├── ui.test.tsx             # Юнит-тесты для ui.tsx
│   │   ├── sidebar/                        # Компонент бокового меню
│   │   │   ├── ui.tsx                      # UI-компонент (навигация)
│   │   │   ├── index.ts                    # Публичный API (экспорт Sidebar)
│   │   │   ├── README.md                   # Документация (описание меню)
│   │   │   ├── __tests__/                  # Тесты для компонента
│   │   │       ├── ui.test.tsx             # Юнит-тесты для ui.tsx
│   │   ├── layout/                         # Компоненты layout
│   │   │   ├── dashboard-layout.tsx        # Layout для страниц с дашбордом
│   │   │   ├── login-layout.tsx            # Layout для страницы логина
│   │   │   ├── index.ts                    # Публичный API (экспорт DashboardLayout, LoginLayout)
│   │   │   ├── README.md                   # Документация (описание layouts)
│   │   │   ├── __tests__/                  # Тесты для компонентов
│   │   │       ├── dashboard-layout.test.tsx # Юнит-тесты для dashboard-layout.tsx
│   │   │       ├── login-layout.test.tsx   # Юнит-тесты для login-layout.tsx
│   │   ├── table/                          # Компонент таблицы
│   │   │   ├── ui.tsx                      # UI-компонент (таблица с сортировкой, пагинацией)
│   │   │   ├── index.ts                    # Публичный API (экспорт Table)
│   │   │   ├── README.md                   # Документация (описание таблицы)
│   │   │   ├── __tests__/                  # Тесты для компонента
│   │   │       ├── ui.test.tsx             # Юнит-тесты для ui.tsx
│   │
│   ├── shared/                             # Общие утилиты и компоненты
│   │   ├── api/                            # Централизованные API-клиенты
│   │   │   ├── auth/                       # API для авторизации
│   │   │   │   ├── client.ts               # Axios-клиент для запросов авторизации
│   │   │   │   ├── index.ts                # Публичный API (экспорт authApi)
│   │   │   ├── user/                       # API для пользователей
│   │   │   │   ├── client.ts               # Axios-клиент для запросов пользователей
│   │   │   │   ├── index.ts                # Публичный API (экспорт userApi)
│   │   │   ├── task/                       # API для задач
│   │   │   │   ├── client.ts               # Axios-клиент для запросов задач
│   │   │   │   ├── index.ts                # Публичный API (экспорт taskApi)
│   │   │   ├── object/                     # API для объектов
│   │   │   │   ├── client.ts               # Axios-клиент для запросов объектов
│   │   │   │   ├── index.ts                # Публичный API (экспорт objectApi)
│   │   │   ├── parameter/                  # API для параметров
│   │   │   │   ├── client.ts               # Axios-клиент для запросов параметров
│   │   │   │   ├── index.ts                # Публичный API (экспорт parameterApi)
│   │   │   ├── non-compliance/             # API для несоответствий
│   │   │   │   ├── client.ts               # Axios-клиент для запросов несоответствий
│   │   │   │   ├── index.ts                # Публичный API (экспорт nonComplianceApi)
│   │   │   ├── dashboard/                  # API для дашборда
│   │   │   │   ├── client.ts               # Axios-клиент для запросов дашборда
│   │   │   │   ├── index.ts                # Публичный API (экспорт dashboardApi)
│   │   │   ├── help/                       # API для помощи
│   │   │   │   ├── client.ts               # Axios-клиент для запросов помощи
│   │   │   │   ├── index.ts                # Публичный API (экспорт helpApi)
│   │   │   ├── settings/                   # API для настроек
│   │   │   │   ├── client.ts               # Axios-клиент для запросов настроек
│   │   │   │   ├── index.ts                # Публичный API (экспорт settingsApi)
│   │   │   ├── axios.ts                    # Глобальная конфигурация Axios (интерцепторы, базовый URL)
│   │   │   ├── index.ts                    # Публичный API (экспорт всех клиентов)
│   │   │
│   │   ├── lib/                            # Общие утилиты
│   │   │   ├── schemas.ts                  # Zod-схемы для валидации форм и API
│   │   │   ├── storage.ts                  # 
│   │   │   ├── error-handler.ts            # Утилита для обработки ошибок API
│   │   │   ├── normalize.ts                # Общие функции нормализации данных
│   │   │   ├── index.ts                    # Публичный API (экспорт утилит)
│   │   │   ├── __tests__/                  # Тесты для утилит
│   │   │       ├── error-handler.test.ts   # Юнит-тесты для error-handler.ts
│   │   │       ├── normalize.test.ts       # Юнит-тесты для normalize.ts
│   │   │
│   │   ├── ui/                             # Общие UI-компоненты
│   │   │   ├── Button.tsx                  # Компонент универсальной кнопки
│   │   │   ├── Input.tsx                   # Компонент универсального поля ввода
│   │   │   ├── index.ts                    # Публичный API (экспорт Button, Input)
│   │   │   ├── __tests__/                  # Тесты для компонентов
│   │   │       ├── Button.test.tsx         # Юнит-тесты для Button.tsx
│   │   │       ├── Input.test.tsx          # Юнит-тесты для Input.tsx
│   │   │
│   │   ├── hooks/                          # Общие хуки
│   │   │   ├── use-debounce.ts             # Хук для дебаунсинга значений
│   │   │   ├── use-user.ts                 # Хук для получения данных текущего пользователя
│   │   │   ├── index.ts                    # Публичный API (экспорт хуков)
│   │   │   ├── __tests__/                  # Тесты для хуков
│   │   │       ├── use-debounce.test.ts    # Юнит-тесты для use-debounce.ts
│   │   │       ├── use-user.test.ts        # Юнит-тесты для use-user.ts
│   │   │
│   │   ├── config/                         # Конфигурации приложения
│   │   │   ├── navigation.ts               # Конфигурация навигации (пункты меню, роли)
│   │   │   ├── theme.ts                    # MUI-тема для стилизации приложения
│   │   │   ├── index.ts                    # Публичный API (экспорт конфигураций)
│   │   │
│   │   ├── types/                          # Общие типы, используемые в приложении
│   │   │   ├── api.ts                      # Типы для API-ответов (например, Response<T>)
│   │   │   ├── index.ts                    # Публичный API (экспорт типов)
│   │   │
│   │   ├── processes/                      # Долгие процессы
│   │   │   ├── notifications/              # Процесс управления уведомлениями
│   │   │   │   ├── model/                  # Бизнес-логика
│   │   │   │   │   ├── store.ts            # Zustand-хранилище для уведомлений
│   │   │   │   ├── hooks/                  # Хуки
│   │   │   │   │   ├── use-notifications.ts # Хук для работы с уведомлениями
│   │   │   │   ├── index.ts                # Публичный API (экспорт хуков, store)
│   │   │   │   ├── README.md               # Документация (описание уведомлений)
│   │   │   │   ├── __tests__/              # Тесты для процесса
│   │   │   │       ├── use-notifications.test.ts # Юнит-тесты для use-notifications.ts
│   │   │
│   ├── assets/                             # Ресурсы приложения (иконки, изображения)
│   │   ├── icons/                          # SVG-иконки
│   │   │   ├── user.svg                    # Иконка пользователя
│   │   │   ├── task.svg                    # Иконка задачи
│   │   ├── images/                         # Изображения
│   │   │   ├── logo.png                    # Логотип приложения
│   │
├── public/                                 # Статические файлы, доступные напрямую
│   ├── favicon.ico                         # Иконка приложения для браузера
│   ├── manifest.json                       # Манифест для PWA (если используется)
│
├── tests/                                  # Глобальные тесты (интеграционные, e2e)
│   ├── setup.ts                            # Настройка тестовой среды (Jest)
│   ├── integration/                        # Интеграционные тесты
│   │   ├── auth.test.ts                    # Тесты авторизации
│   │   ├── tasks.test.ts                   # Тесты работы с задачами
│   │
├── .env                                    # Переменные окружения для продакшена (API_URL и т.д.)
├── .env.test                               # Переменные окружения для тестов
├── .gitignore                              # Игнорируемые файлы (node_modules, dist)
├── db.json                                 # Мок API для разработки (JSON Server)
├── eslint.config.js                        # Конфигурация ESLint (правила линтинга, FSD)
├── tsconfig.json                           # Основная конфигурация TypeScript
├── tsconfig.app.json                       # Конфигурация TypeScript для приложения
├── tsconfig.node.json                      # Конфигурация TypeScript для Node.js
├── vite.config.ts                          # Конфигурация Vite (алиасы, плагины)
├── package.json                            # Зависимости и скрипты проекта
├── README.md                               # Общая документация проекта (установка, запуск)

------------------------------------------------------------------------------------------------------
------------------------------------ Комментарии к структуре -----------------------------------------
------------------------------------------------------------------------------------------------------

1. src/:
- Содержит весь исходный код приложения, организованный по слоям FSD 3.0 (app, pages, features, entities, widgets, shared, processes).

2. app/:
- Слой для глобальной конфигурации приложения.
- init.tsx: Инициализация провайдеров (MUI Theme, React Query).
- routes.tsx: Определение маршрутов с использованием react-router-dom.
- error-boundary.tsx: Компонент для обработки ошибок на уровне приложения.
- index.tsx: Точка входа, где рендерится корневой компонент.

3. pages/:
- Слой для страниц приложения, каждая из которых представляет отдельный маршрут.
- Каждая страница (например, dashboard, login) содержит ui.tsx для UI и index.ts для публичного API.
- Подпапки в tasks и logs отражают вложенные маршруты.

4. features/:
- Слой для функциональных возможностей (фичи), таких как авторизация, списки пользователей, задачи.
- Каждая фича содержит:
    * model/: Бизнес-логика (например, Zustand-хранилища или фильтры).
    * hooks/: Хуки для доступа к данным или логике.
    * ui/: UI-компоненты, специфичные для фичи.
    * types.ts: Типы для фичи.
    * index.ts: Публичный API для экспорта.

5. entities/:
- Слой для бизнес-сущностей (например, пользователь, задача).
- Содержит model/ для нормализации данных и types.ts для типизации.

6. widgets/:
- Слой для переиспользуемых UI-компонентов, таких как шапка, боковое меню, таблицы.
- Компоненты в layout/ определяют структуру страниц (например, dashboard-layout.tsx).

7. shared/:
- Слой для общих ресурсов, доступных всем слоям.
- api/: Централизованные API-клиенты, разделенные по доменам (например, auth, user).
- lib/: Общие утилиты (Zod-схемы, обработка ошибок).
- ui/: Общие UI-компоненты (например, Button, Input).
- hooks/: Общие хуки (например, useDebounce).
- config/: Конфигурации (тема MUI, навигация).
- processes/:
    * Слой для длительных процессов, таких как уведомления.
    * notifications: Хранилище и хуки для управления уведомлениями.

8. public/:
- Статические файлы, такие как иконки и логотипы.

9. Корневые файлы:
- .env, .env.test: Переменные окружения для продакшена и тестов.
- .gitignore: Игнорирование node_modules, dist и других ненужных файлов.
- db.json: Мок API для разработки с использованием JSON Server.
- eslint.config.js: Правила линтинга и контроль зависимостей FSD.
- tsconfig.json, tsconfig.app.json, tsconfig.node.json: Конфигурации TypeScript.
- vite.config.ts: Настройки Vite, включая алиасы.
- package.json: Зависимости и скрипты.
- README.md: Документация проекта.

